<?php

namespace Rodger\GalleryBundle\Entity;

use Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query,
    FOS\UserBundle\Model\UserInterface;

/**
 * AlbumRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlbumRepository extends EntityRepository
{
    /**
     * Prepares QueryBuilder to show latest albums
     *
     * @param mixed $user
     * @param array $filters
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getLatestQueryBuilder($user, array $filters)
    {
        $qb = $this->createQueryBuilder('a');
        if (!$user instanceof UserInterface) {
            $qb->where('a.private = false');
        }
        if (is_numeric($filters['year'])) {
            $existsQb = $this->_em->createQueryBuilder()
                ->select('i2.id')
                ->from('RodgerGalleryBundle:Image', 'i2')
                ->where('i2.album = a.id AND i2.year = :year')
                ->setParameter('year', $filters['year']);
            $qb->andWhere($qb->expr()->exists($existsQb->getDQL()));
            $qb->addSelect('(SELECT MAX(i3.takenAt) FROM RodgerGalleryBundle:Image i3 WHERE i3.album = a.id) sort_date');
            $qb->setParameter('year', $filters['year']);
        } else {
            $qb->addSelect('(SELECT MAX(i3.takenAt) FROM RodgerGalleryBundle:Image i3 WHERE i3.album = a.id) sort_date');
        }

        if (count($filters['tags'])) {
            $album_ids = $this->getAlbumsIdUsingTags($user, $filters['tags'], $filters['year']);
            $qb->andWhere($qb->expr()->in('a.id', $album_ids + array(0)));
        }


        $qb
            ->addSelect('(SELECT COUNT(i4.id) from RodgerGalleryBundle:Image i4 WHERE i4.album = a.id) album_images_count')
            ->orderBy('sort_date', 'desc');

        return $qb;
    }

    /**
     * Gets id of Albums matching filters
     *
     * @param mixed   $user
     * @param array   $tags
     * @param integer $year
     *
     * @return array
     */
    public function getAlbumsIdUsingTags($user, array $tags = array(), $year = null)
    {
        $qb = $this->createQueryBuilder('a')->select('a.id');
        $qb->innerJoin('a.images', 'i')
            ->leftJoin('a.tags', 'at')
            ->leftJoin('i.tags', 'it');

        if (count($tags)) {
            $qb->andWhere($qb->expr()->orX($qb->expr()->in('at.name', $tags), $qb->expr()->in('it.name', $tags)));
        }
        if (is_numeric($year)) {
            $qb->andWhere($qb->expr()->eq('i.year', $year));
        }
        if (!$user instanceof UserInterface) {
            $qb->andWhere('a.private = false and i.private = false');
        }
        $result = array_unique(
            array_map(
                function ($r) {
                    return $r['id'];
                },
                $qb->getQuery()->execute(array(), Query::HYDRATE_ARRAY)
            )
        );

        return $result;
    }

}