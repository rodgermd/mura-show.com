<?php

namespace Rodger\GalleryBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRepository extends EntityRepository
{
  public function getLatestInAlbumQueryBuilder(Album $album, $show_private = false, array $filters = array()) {
    $qb = $this->getAccessibleImagesBuilder($album, $show_private);
    $qb->select('partial i.{id, filename}')
          ->orderBy('i.taken_at', 'desc')
          ->addOrderBy('i.uploaded_at', 'desc');
    
    if (count($filters)) {
      if (is_numeric($filters['year'])) $qb->andWhere($qb->expr()->eq('i.year', $filters['year']));
      if (count($filters['tags'])) $qb->innerJoin ('i.Tags', 't', 'WITH', $qb->expr()->in('t.name', $filters['tags']));
    }
    
    return $qb;
  }
  
  /**
   * Gets asccessible image QueryBuilder
   * @param Album $album
   * @param type $user
   * @return \Doctrine\ORM\QueryBuilder 
   */
  public function getAccessibleImagesBuilder(Album $album, $user = null)
  {
    $qb = $this->createQueryBuilder('i')
          ->where('i.album_id = :album_id')
          ->setParameter('album_id', $album->getId())
          ->orderBy('i.taken_at', 'asc')
          ->addOrderBy('i.uploaded_at', 'asc');
    
    if (!$user) {
      $qb->andWhere('i.is_private = false');
    }
    return $qb;
  }
  
  public function getYears($user) {
    $show_private = ($user instanceof \FOS\UserBundle\Model\UserInterface);
    $qb = $this->createQueryBuilder('i');
    if (!$show_private) {
      $qb->where('i.is_private = false');
    }
    $qb->select('DISTINCT i.year')->orderBy('i.year', 'desc');
   
    $result = $qb->getQuery()->getResult();
    return array_map(function($item){ return $item['year']; }, $result);
            
  }
  
  public function getFilteredAlbumImages(Album $album, array $filters, $user)
  {
    $qb = $this->getAccessibleImagesBuilder($album, $user);
    if (count($filters['tags'])) {
      $qb->innerJoin('i.Album', 'a')
         ->leftJoin('a.Tags', 'at')
         ->leftJoin('i.Tags', 'it')
         ->andWhere($qb->expr()->orX(
           $qb->expr()->in('it.name', $filters['tags']),
           $qb->expr()->in('at.name', $filters['tags'])
         ));
      
    }
    
    return $qb->getQuery()->execute();
  }
}